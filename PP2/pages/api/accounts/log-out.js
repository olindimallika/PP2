import prisma from '../../../utils/db';
import jwt from 'jsonwebtoken';

// verifies if the user is logged in
export const isLoggedIn = async (req) => {
    // extracting token from authorization header, generated by ChatGPT, prompt was "extract token from authorization header by splitting on space and getting the second element"
    const token = req.headers.authorization?.split(' ')[1];

    if (!token) {
        console.error("No token found in the authorization header");
        return null;
    }

    // try-catch block generated by ChatGPT, prompt was "add error handling to verify user login and decode authorization token"
    try {  
        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        const user = await prisma.user.findUnique({
            where: {
                id: decoded.userId,
            },
        });

        if (!user) {
            console.error("User not found with decoded userId:", decoded.userId);
        }

        return user;

    } catch (error) {
        console.error("Error decoding token:", error.message);
        return null;
    }
};

export default async function logOut(req, res) {
    if (req.method === 'POST') {
        const user = await isLoggedIn(req);

        if (!user) {
            return res.status(401).json({ message: 'Unauthorized.' });
        }

        // logs users out by ending the session
        return res.status(200).json({ message: 'Successfully logged out.' });
    }

    res.status(405).json({ message: 'Method not allowed' });
}
