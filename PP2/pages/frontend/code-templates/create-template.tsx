import React, { FormEvent } from "react";
import Head from "next/head";
import { useRouter } from 'next/router';

export default function Templates() {
    const [title, setTitle] = React.useState("");
    const [explanation, setExplanation] = React.useState("");
    const [code, setCode] = React.useState("");
    const [tags, setTags] = React.useState("");
    const [blogs, setBlogs] = React.useState("");
    const [error, setError] = React.useState("");
    const [success, setSuccess] = React.useState("");
    const router = useRouter();

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        // preventing default form submission behaviour
        e.preventDefault();

        const token = localStorage.getItem('accessToken');
        if (!token) {
            setError('Must be logged in or sign up to create a code template.');
            return;
        }

        try {
            const response = await fetch('/api/code-templates/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({
                    title: title,
                    explanation: explanation,
                    code: code,
                    tags: tags.split(","), 
                    blogPostIds: blogs.split(",").map(Number)
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'An error occurred while creating the code template.');
            }

            const responseData = await response.json();

            const template = responseData.template;
            localStorage.setItem('templateId', JSON.stringify(template.id));

            setSuccess('Template saved successfully!');
            setError('');                    
        } catch (err: any) {
            setError(err.message || 'An error occurred');
        } 
    };

    const handleClick = () => {
        window.location.href='/view-templates';
    };

    const redirectToLogIn = () => {
        router.push(`/log-in?callback=/create-template`);
    };

    const redirectToSignUp = () => {
        router.push(`/sign-up?callback=/create-template`);
    };

    return (
        <>
            <Head>
                <title>Scriptorium</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 py-8">
                {/* Form Container */}
                <div className="bg-white shadow-lg rounded-lg p-8 w-full max-w-lg">
                    <h1 className="text-2xl font-bold text-center mb-6">Create Template</h1>
                    <form onSubmit={handleSubmit} className="space-y-6">
                        {/* Template Title Input */}
                        <input 
                            type="text" 
                            id="title" 
                            className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 text-black"
                            placeholder="Template Title" 
                            value={title} 
                            onChange={(e) => setTitle(e.target.value)}>
                        </input>
                        {/* Template Explanation Input */}
                        <input 
                            type="text" 
                            id="explanation" 
                            className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 text-black"
                            placeholder="Explanation" 
                            value={explanation} 
                            onChange={(e) => setExplanation(e.target.value)}>
                        </input>
                        {/* Template Code */}
                        <textarea 
                            id="code" 
                            className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 text-black"
                            rows={4} placeholder="Write your code here..." 
                            value={code} onChange={(e) => setCode(e.target.value)}>
                        </textarea>
                        {/* Template Tags Input */}
                        <input 
                            type="text" 
                            id="tags" 
                            className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 text-black"
                            placeholder="Tags: (eg. tag1, tag2, tag3,...)" 
                            value={tags} onChange={(e) => setTags(e.target.value)}>
                        </input>
                        {/* Blog Post IDs Input */}
                        <input 
                            type="text" 
                            id="blogPosts" 
                            className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 text-black"
                            placeholder="Blog Post IDs: (eg. 1, 2, 3,..)" 
                            value={blogs} onChange={(e) => setBlogs(e.target.value)}>
                        </input>
                        <button 
                            className="w-full bg-blue-500 text-white font-bold py-3 rounded-lg hover:bg-blue-600">
                            {"Save"}
                        </button>
                            
                        {error && (
                            <div className="text-red-500 text-center mt-4">
                                <p>{error}</p>
                                {(error === 'Must be logged in or sign up to create a code template.' || error === 'Unauthorized or invalid token') && (
                                    <div className="flex space-x-4 justify-center mt-2">
                                        <button
                                            onClick={redirectToLogIn}
                                            className="text-blue-500 underline cursor-pointer"
                                        >
                                            Log in
                                        </button>
                                        <span>|</span>
                                        <button
                                            onClick={redirectToSignUp}
                                            className="text-blue-500 underline cursor-pointer"
                                        >
                                            Sign up
                                        </button>
                                    </div>
                                )}
                            </div>
                        )}
                        {/* Success Message */}
                        {success && (
                            <div className="flex space-x-4 justify-center mt-2">
                                <p className="text-green-500 text-center">{success}</p>
                                <span>|</span>
                                <button
                                    onClick={handleClick}
                                    className="text-blue-500 underline cursor-pointer"
                                >
                                    View templates here
                                </button> 
                            </div>
                        )}
                    </form>
                </div>
            </div>                
        </>
    );
}


