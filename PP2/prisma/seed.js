// prisma/seed.js
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

//seed.js was generated by ChatGpt and autopilot completion. The prompt was "create a seed.js file that seeds the database with an admin user. use my
//existing signup code as a reference."
const prisma = new PrismaClient();

async function main() {
    const adminData = {
        firstName: 'Admin',
        lastName: 'User',
        email: 'admin@example.com',
        password: 'adminPassword123', // The admin password to be hashed
        avatar: '/avatars/avatar1.png', // Ensure this matches one of the valid avatars
        phoneNumber: '123-456-7890',
        role: 'admin'
    };

    // Hash the admin password
    const hashedPassword = await bcrypt.hash(adminData.password, 10);

    //this try-catch and main() was generated by Copilot autopilot completion.
    // Use upsert to create or update the admin user
    try {
        const adminUser = await prisma.user.upsert({
            where: { email: adminData.email },
            update: {},
            create: {
                firstName: adminData.firstName,
                lastName: adminData.lastName,
                email: adminData.email,
                password: hashedPassword,
                avatar: adminData.avatar,
                phoneNumber: adminData.phoneNumber,
                role: adminData.role
            },
            select: {
                id: true,
                firstName: true,
                lastName: true,
                email: true,
                avatar: true,
                phoneNumber: true,
                role: true
            }
        });

        console.log("Admin user created successfully:", adminUser);
    } catch (error) {
        console.error("Error creating admin user:", error);
    }
}

main()
    .catch((e) => {
        console.error(e);
        process.exit(1);
    })
    .finally(async () => {
        await prisma.$disconnect();
    });
